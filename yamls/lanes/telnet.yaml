heat_template_version: "2016-10-14"

## an openstack HEAT yaml has 3 basic components:
#   -- parameters
#     --> these are values passed to openstack when it is deploying the yaml.
#     --> not really useful with CTFd integration
#   -- resources
#     --> everything you're deploying
#     --> can deploy vm instances, networks, etc
#   -- ouptuts
#     --> anything you want returned back as an output
#     --> not really useful with CTFd integration
##
description: Basic Telnet

### Don't change these parameters. the CTFd framework will supply these so the lane can integrate
### with the other deployed stacks


parameters:

  student_id:
    type: string
    label: Student ID
    description: Student ID Number
    constraints:
      -  allowed_pattern: "[0-2]?[0-9][0-9]"
         description: Student ID must be a numeric > 010 and < 250
    default: "100"

  ex_lane_net_uuid:
    type: string
    label: Lane Network UUID
    description: UUID of the persistent exercise network object
    default: c7423992-560f-4205-ae99-1a2237f0bd8e

  ex_lane_net_sub_uuid:
    type: string
    label: Exercise Network Subnet UUID
    description: UUID of the persistent exercise network subnet object
    default: feb0180f-0390-44fd-8fb1-f78eb3110704

resources:
#unique string is used to randomize all instnce names, also provides entropy for scripts
#please don't remove this one. if you need more randomization, create another
  random-str:
    type: OS::Heat::RandomString
    properties:
      length: 8



#The exercise lane net is deployed by the Persistent Network stack. The CTFd framework will provide
# the external id as a parameter when the yaml is deployed. Don't change this or your student
# workstations won't have access to the network you are dpeloying.
  ex-lane-net:
    type: OS::Neutron::Net
    properties:
      name: ex_lane_net
    external_id: { get_param: ex_lane_net_uuid }

  ex-lane-net-sub:
    type: OS::Neutron::Subnet
    properties:
      cidr: 172.18.0.0/16
      gateway_ip: 172.18.0.1
      network: { get_resource: ex-lane-net }
      name: ex_lane_net_sub
      dns_nameservers: [ 8.8.8.8 ]
    external_id: { get_param: ex_lane_net_sub_uuid }

## a port provides the interface on the actual vm instance to connect to the network
  ex-lane-net-ports-box1:
    type: OS::Neutron::Port    
    properties:
      port_security_enabled: false
      network_id: { get_resource: ex-lane-net }
      fixed_ips:
      - subnet_id: { get_resource: ex-lane-net-sub }
        ip_address:
          str_replace:
            template: 172.18.stuID.213
            params:
              stuID: { get_param: student_id }
    depends_on: [ex-lane-net, ex-lane-net-sub ]
    
## here is an example of a vm instance being defined. Note that user_data is executed line by line with bash once the vm starts up. This can be used to set up custom configurations and environments.
  box1:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: ex_lane_box1_stuID_randomStr
          params:
            stuID: { get_param: student_id }
            randomStr: { get_resource: random-str }
      image: Debian Jessie
      flavor: cy.small
      networks:
        - port: { get_resource: ex-lane-net-ports-box1 }
      user_data:
        str_replace:
          template: |
            #!/bin/bash
            iptables -I INPUT -p tcp --dport 22 -j DROP
            echo "root:sekret" | chpasswd
            echo "guest:x:1001:1001:guest,,,:/home/guest:/bin/bash" >> /etc/passwd
            mkdir -p /home/guest
            chown guest:guest /home/guest
            echo "guest:guest" | chpasswd
            sed -i 's/localhost.*/localhost boxHostname/g' /etc/hosts
            echo "nameserver 8.8.8.8" > /etc/resolv.conf
            echo boxHostname>/etc/hostname
            apt-get update && apt-get upgrade -y
            apt-get install -y telnetd
            apt-get remove -y openssh-server openssh-client
            mkdir -p /root/.ssh
            chmod 700 /root/.ssh
            echo "flag:{Is this real or is it a game?}" > /root/.ssh/id_rsa
            sleep 30 && echo "root:sekret" | chpasswd 
            sleep 30 && echo "guest:guest" | chpasswd
          params:
            $password: { get_resource: random-str }
            boxHostname: basics1_box1
      user_data_format: RAW

outputs:
 random_str:
    description: Random string used to seed student VMs, or in this case, set root password
    value: { get_attr : [random-str, value] }


